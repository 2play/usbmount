#!/bin/sh
# This script mounts USB mass storage devices when they are plugged in
# and unmounts them when they are removed.
# Copyright (C) 2004, 2005 Martin Dickopp
# Copyright (C) 2008, 2009 RogÃ©rio Brito
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
set -e
exec > /dev/null 2>&1

######################################################################
# Auxiliary functions 

# Log a string via the syslog facility.
log()
{
    if test $1 != debug || expr "$VERBOSE" : "[yY]" > /dev/null; then
	logger -p user.$1 -t "usbmount[$$]" -- "$2"
    fi
}


# Test if the first parameter is in the list given by the second
# parameter.
in_list()
{
    for v in $2; do
	test "$1" != "$v" || return 0
    done
    return 1
}


######################################################################
# Main program

# Default values for configuration variables.
ENABLED=1
MOUNTPOINTS=""
FILESYSTEMS=""
MOUNTOPTIONS=""
FS_MOUNTOPTIONS=""
VERBOSE="no"

# Read configuration file.
if [ -r /etc/usbmount/usbmount.conf ]; then
    . /etc/usbmount/usbmount.conf
    log debug "loaded usbmount configurations"
fi

# Check if usbmount should be run.
if [ "${ENABLED:-1}" -eq "0" ]; then
    log info "usbmount is disabled, see /etc/usbmount/usbmount.conf"
    exit 0
fi

# Test if blkid is executable.
if [ ! -x /sbin/blkid ]; then
    log err "cannot execute /sbin/blkid"
    exit 1
fi

# Per Policy 9.3.2, directories under /var/run/usbmount have to be checked
# after every reboot.
if [ ! -e /var/run/usbmount ]; then
    mkdir -p /var/run/usbmount
    log debug "creating /var/run/usbmount directory"
fi

umask 022

if [ "$1" = "add" ]; then

    # Acquire lock.
    log debug "trying to acquire lock /var/run/usbmount/.mount.lock"
    lockfile-create --retry 3 /var/run/usbmount/.mount || \
	{ log err "cannot acquire lock /var/run/usbmount/.mount.lock"; exit 1; }
    trap '( lockfile-remove /var/run/usbmount/.mount )' 0
    log debug "acquired lock /var/run/usbmount/.mount.lock"

    # Try to read from the device.  Some devices need a few seconds
    # initialization time before they can be accessed.  Give up after
    # 20 seconds.  Thanks to Peter Stelmachovic for his help with
    # debugging this.
    log debug "testing whether $DEVNAME is readable"
    read_success=no; T=0; RETRIES=20
    while [ $T -lt $RETRIES ]; do
	if dd if="$DEVNAME" of=/dev/null bs=512 count=1; then
	    read_success=yes
	    break
	fi
	T=$((T + 1));
	log debug "attempt $T to read from $DEVNAME failed"
	sleep 1
    done

    if [ "$read_success" != "yes" ]; then
	log err "could not read from $DEVNAME for $RETRIES seconds; aborting"
	exit 1
    fi

    UUID=$(/sbin/blkid "$DEVNAME" | sed -e 's/.*UUID="\([^"]*\)".*/\1/g; s/\s*//g;')
    # Test if the device has an /etc/fstab entry. In that case, we will
    # mount it using the regular mount command.
    if grep -q "^[ 	]*$DEVNAME" /etc/fstab; then
        log debug "$DEVNAME has an /dev/fstab entry, using that"

	# Mount the filesystem.
	log info "executing command: mount $DEVNAME"
	mount "$DEVNAME"

    # Test if the device has an /etc/fstab entry with its UUID, in this
    # case we will mount it with a mount command on the mount point
    elif grep -q $UUID /etc/fstab; then
        log debug "$DEVNAME has an /etc/fstab entry, with UUID $UUID, using that"

        MOUNT_POINT="`grep $UUID /etc/fstab|awk '{print $2}'`"
        log info "executing command: mount $MOUNT_POINT"
	mount "$DEVNAME"

    # Test if the device contains a filesystem.
    elif /sbin/blkid -p -o udev "$DEVNAME" | egrep -q '^ID_FS_USAGE=(filesystem|disklabel)$'; then
	log debug "$DEVNAME contains a filesystem or disklabel"

	fstype=$(/sbin/blkid -s TYPE -o value "$DEVNAME" | sed -e 's/\s*//g;')
	log debug "$DEVNAME contains filesystem type $fstype"

	# Test if the filesystem type is in the list of filesystem
	# types to mount.
	if in_list "$fstype" "$FILESYSTEMS"; then

	    # Search an available mountpoint.
	    for v in $MOUNTPOINTS; do
		if test -d "$v" \
		    && ! grep -q "^[^ ][^ ]*  *$v " /proc/mounts; then
		    mountpoint="$v"
		    log debug "mountpoint $mountpoint is available for $DEVNAME"
		    break
		fi
	    done
	    if test -n "$mountpoint"; then
		# Determine mount options.
		options=
		for v in $FS_MOUNTOPTIONS; do
		    if expr "$v" : "-fstype=$fstype,."; then
			options="`echo \"$v\" | sed 's/^[^,]*,//'`"
			break
		    fi
		done
		if test -n "$MOUNTOPTIONS"; then
		    options="$MOUNTOPTIONS${options:+,$options}"
		fi

		# Mount the filesystem.
		log info "executing command: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint"
		mount "-t$fstype" "${options:+-o$options}" "$DEVNAME" "$mountpoint"

		# Determine vendor and model.
		vendor=
		if [ -r "/sys$DEVPATH/device/vendor" ]; then
		    vendor="`cat \"/sys$DEVPATH/device/vendor\"`"
		elif [ -r "/sys$DEVPATH/../device/vendor" ]; then
		    vendor="`cat \"/sys$DEVPATH/../device/vendor\"`"
		elif [ -r "/sys$DEVPATH/device/../manufacturer" ]; then
		    vendor="`cat \"/sys$DEVPATH/device/../manufacturer\"`"
		elif [ -r "/sys$DEVPATH/../device/../manufacturer" ]; then
		    vendor="`cat \"/sys$DEVPATH/../device/../manufacturer\"`"
		fi
		vendor="`echo \"$vendor\" | sed 's/^ *//; s/ *$//'`"

		model=
		if [ -r "/sys$DEVPATH/device/model" ]; then
		    model="`cat \"/sys$DEVPATH/device/model\"`"
		elif [ -r "/sys$DEVPATH/../device/model" ]; then
		    model="`cat \"/sys$DEVPATH/../device/model\"`"
		elif [ -r "/sys$DEVPATH/device/../product" ]; then
		    model="`cat \"/sys$DEVPATH/device/../product\"`"
		elif [ -r "/sys$DEVPATH/../device/../product" ]; then
		    model="`cat \"/sys$DEVPATH/../device/../product\"`"
		fi
		model="`echo \"$model\" | sed 's/^ *//; s/ *$//'`"

		# Run hook scripts; ignore errors.
		export UM_DEVICE="$DEVNAME"
		export UM_MOUNTPOINT="$mountpoint"
		export UM_FILESYSTEM="$fstype"
		export UM_MOUNTOPTIONS="$options"
		export UM_VENDOR="$vendor"
		export UM_MODEL="$model"
		log info "executing command: run-parts /etc/usbmount/mount.d"
		run-parts /etc/usbmount/mount.d || :
	    else
		# No suitable mount point found.
		log warning "no mountpoint found for $DEVNAME"
		exit 1
	    fi
	fi
    else
	log debug "$DEVNAME does not contain a filesystem or disklabel"
    fi

elif test "$1" = remove; then

    # A block or partition device has been removed.
    # Test if it is mounted.
    while read device mountpoint fstype remainder; do
	if [ "$DEVNAME" = "$device" ]; then
	    # If the mountpoint and filesystem type are maintained by
	    # this script, unmount the filesystem.
	    if in_list "$mountpoint" "$MOUNTPOINTS" \
		&& in_list "$fstype" "$FILESYSTEMS"; then
		log info "executing command: umount -l $mountpoint"
		umount -l "$mountpoint"

		# Run hook scripts; ignore errors.
		export UM_DEVICE="$DEVNAME"
		export UM_MOUNTPOINT="$mountpoint"
		export UM_FILESYSTEM="$fstype"
		log info "executing command: run-parts /etc/usbmount/umount.d"
		run-parts /etc/usbmount/umount.d || :
	    fi
	    break
	fi
    done < /proc/mounts

fi

exit 0
